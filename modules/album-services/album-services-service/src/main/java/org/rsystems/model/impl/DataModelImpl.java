/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.rsystems.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.rsystems.model.Data;
import org.rsystems.model.DataModel;
import org.rsystems.model.DataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Data service. Represents a row in the &quot;Album_Data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DataImpl
 * @see Data
 * @see DataModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DataModelImpl extends BaseModelImpl<Data> implements DataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data model instance should use the {@link Data} interface instead.
	 */
	public static final String TABLE_NAME = "Album_Data";
	public static final Object[][] TABLE_COLUMNS = {
			{ "album_id", Types.INTEGER },
			{ "album_name", Types.VARCHAR },
			{ "album_path", Types.VARCHAR },
			{ "creation_date", Types.TIMESTAMP },
			{ "created_by", Types.VARCHAR },
			{ "access_", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("album_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("album_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("album_path", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("creation_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created_by", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("access_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table Album_Data (album_id INTEGER not null primary key,album_name VARCHAR(75) null,album_path VARCHAR(75) null,creation_date DATE null,created_by VARCHAR(75) null,access_ INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Album_Data";
	public static final String ORDER_BY_JPQL = " ORDER BY data.album_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Album_Data.album_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.rsystems.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.rsystems.model.Data"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.rsystems.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.rsystems.model.Data"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Data toModel(DataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Data model = new DataImpl();

		model.setAlbum_id(soapModel.getAlbum_id());
		model.setAlbum_name(soapModel.getAlbum_name());
		model.setAlbum_path(soapModel.getAlbum_path());
		model.setCreation_date(soapModel.getCreation_date());
		model.setCreated_by(soapModel.getCreated_by());
		model.setAccess(soapModel.getAccess());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Data> toModels(DataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Data> models = new ArrayList<Data>(soapModels.length);

		for (DataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.rsystems.service.util.ServiceProps.get(
				"lock.expiration.time.org.rsystems.model.Data"));

	public DataModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _album_id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setAlbum_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _album_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Data.class;
	}

	@Override
	public String getModelClassName() {
		return Data.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("album_id", getAlbum_id());
		attributes.put("album_name", getAlbum_name());
		attributes.put("album_path", getAlbum_path());
		attributes.put("creation_date", getCreation_date());
		attributes.put("created_by", getCreated_by());
		attributes.put("access", getAccess());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer album_id = (Integer)attributes.get("album_id");

		if (album_id != null) {
			setAlbum_id(album_id);
		}

		String album_name = (String)attributes.get("album_name");

		if (album_name != null) {
			setAlbum_name(album_name);
		}

		String album_path = (String)attributes.get("album_path");

		if (album_path != null) {
			setAlbum_path(album_path);
		}

		Date creation_date = (Date)attributes.get("creation_date");

		if (creation_date != null) {
			setCreation_date(creation_date);
		}

		String created_by = (String)attributes.get("created_by");

		if (created_by != null) {
			setCreated_by(created_by);
		}

		Integer access = (Integer)attributes.get("access");

		if (access != null) {
			setAccess(access);
		}
	}

	@JSON
	@Override
	public int getAlbum_id() {
		return _album_id;
	}

	@Override
	public void setAlbum_id(int album_id) {
		_album_id = album_id;
	}

	@JSON
	@Override
	public String getAlbum_name() {
		if (_album_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _album_name;
		}
	}

	@Override
	public void setAlbum_name(String album_name) {
		_album_name = album_name;
	}

	@JSON
	@Override
	public String getAlbum_path() {
		if (_album_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _album_path;
		}
	}

	@Override
	public void setAlbum_path(String album_path) {
		_album_path = album_path;
	}

	@JSON
	@Override
	public Date getCreation_date() {
		return _creation_date;
	}

	@Override
	public void setCreation_date(Date creation_date) {
		_creation_date = creation_date;
	}

	@JSON
	@Override
	public String getCreated_by() {
		if (_created_by == null) {
			return StringPool.BLANK;
		}
		else {
			return _created_by;
		}
	}

	@Override
	public void setCreated_by(String created_by) {
		_created_by = created_by;
	}

	@JSON
	@Override
	public int getAccess() {
		return _access;
	}

	@Override
	public void setAccess(int access) {
		_access = access;
	}

	@Override
	public Data toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Data)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataImpl dataImpl = new DataImpl();

		dataImpl.setAlbum_id(getAlbum_id());
		dataImpl.setAlbum_name(getAlbum_name());
		dataImpl.setAlbum_path(getAlbum_path());
		dataImpl.setCreation_date(getCreation_date());
		dataImpl.setCreated_by(getCreated_by());
		dataImpl.setAccess(getAccess());

		dataImpl.resetOriginalValues();

		return dataImpl;
	}

	@Override
	public int compareTo(Data data) {
		int primaryKey = data.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Data)) {
			return false;
		}

		Data data = (Data)obj;

		int primaryKey = data.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Data> toCacheModel() {
		DataCacheModel dataCacheModel = new DataCacheModel();

		dataCacheModel.album_id = getAlbum_id();

		dataCacheModel.album_name = getAlbum_name();

		String album_name = dataCacheModel.album_name;

		if ((album_name != null) && (album_name.length() == 0)) {
			dataCacheModel.album_name = null;
		}

		dataCacheModel.album_path = getAlbum_path();

		String album_path = dataCacheModel.album_path;

		if ((album_path != null) && (album_path.length() == 0)) {
			dataCacheModel.album_path = null;
		}

		Date creation_date = getCreation_date();

		if (creation_date != null) {
			dataCacheModel.creation_date = creation_date.getTime();
		}
		else {
			dataCacheModel.creation_date = Long.MIN_VALUE;
		}

		dataCacheModel.created_by = getCreated_by();

		String created_by = dataCacheModel.created_by;

		if ((created_by != null) && (created_by.length() == 0)) {
			dataCacheModel.created_by = null;
		}

		dataCacheModel.access = getAccess();

		return dataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{album_id=");
		sb.append(getAlbum_id());
		sb.append(", album_name=");
		sb.append(getAlbum_name());
		sb.append(", album_path=");
		sb.append(getAlbum_path());
		sb.append(", creation_date=");
		sb.append(getCreation_date());
		sb.append(", created_by=");
		sb.append(getCreated_by());
		sb.append(", access=");
		sb.append(getAccess());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.rsystems.model.Data");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>album_id</column-name><column-value><![CDATA[");
		sb.append(getAlbum_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>album_name</column-name><column-value><![CDATA[");
		sb.append(getAlbum_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>album_path</column-name><column-value><![CDATA[");
		sb.append(getAlbum_path());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creation_date</column-name><column-value><![CDATA[");
		sb.append(getCreation_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>created_by</column-name><column-value><![CDATA[");
		sb.append(getCreated_by());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>access</column-name><column-value><![CDATA[");
		sb.append(getAccess());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Data.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Data.class
		};
	private int _album_id;
	private String _album_name;
	private String _album_path;
	private Date _creation_date;
	private String _created_by;
	private int _access;
	private Data _escapedModel;
}