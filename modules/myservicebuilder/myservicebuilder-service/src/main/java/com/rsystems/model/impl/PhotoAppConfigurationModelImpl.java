/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rsystems.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.rsystems.model.PhotoAppConfiguration;
import com.rsystems.model.PhotoAppConfigurationModel;
import com.rsystems.model.PhotoAppConfigurationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PhotoAppConfiguration service. Represents a row in the &quot;photoapplication_PhotoAppConfiguration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PhotoAppConfigurationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PhotoAppConfigurationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PhotoAppConfigurationImpl
 * @see PhotoAppConfiguration
 * @see PhotoAppConfigurationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PhotoAppConfigurationModelImpl extends BaseModelImpl<PhotoAppConfiguration>
	implements PhotoAppConfigurationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a photo app configuration model instance should use the {@link PhotoAppConfiguration} interface instead.
	 */
	public static final String TABLE_NAME = "photoapplication_PhotoAppConfiguration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "configName", Types.VARCHAR },
			{ "value1", Types.VARCHAR },
			{ "value2", Types.VARCHAR },
			{ "value3", Types.VARCHAR },
			{ "value4", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("configName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("value1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("value2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("value3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("value4", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table photoapplication_PhotoAppConfiguration (uuid_ VARCHAR(75) null,configName VARCHAR(75) not null primary key,value1 VARCHAR(75) null,value2 VARCHAR(75) null,value3 VARCHAR(75) null,value4 VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table photoapplication_PhotoAppConfiguration";
	public static final String ORDER_BY_JPQL = " ORDER BY photoAppConfiguration.configName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY photoapplication_PhotoAppConfiguration.configName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.rsystems.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rsystems.model.PhotoAppConfiguration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.rsystems.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rsystems.model.PhotoAppConfiguration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.rsystems.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rsystems.model.PhotoAppConfiguration"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long CONFIGNAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PhotoAppConfiguration toModel(
		PhotoAppConfigurationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PhotoAppConfiguration model = new PhotoAppConfigurationImpl();

		model.setUuid(soapModel.getUuid());
		model.setConfigName(soapModel.getConfigName());
		model.setValue1(soapModel.getValue1());
		model.setValue2(soapModel.getValue2());
		model.setValue3(soapModel.getValue3());
		model.setValue4(soapModel.getValue4());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PhotoAppConfiguration> toModels(
		PhotoAppConfigurationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PhotoAppConfiguration> models = new ArrayList<PhotoAppConfiguration>(soapModels.length);

		for (PhotoAppConfigurationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.rsystems.service.util.ServiceProps.get(
				"lock.expiration.time.com.rsystems.model.PhotoAppConfiguration"));

	public PhotoAppConfigurationModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _configName;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setConfigName(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _configName;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PhotoAppConfiguration.class;
	}

	@Override
	public String getModelClassName() {
		return PhotoAppConfiguration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("configName", getConfigName());
		attributes.put("value1", getValue1());
		attributes.put("value2", getValue2());
		attributes.put("value3", getValue3());
		attributes.put("value4", getValue4());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String configName = (String)attributes.get("configName");

		if (configName != null) {
			setConfigName(configName);
		}

		String value1 = (String)attributes.get("value1");

		if (value1 != null) {
			setValue1(value1);
		}

		String value2 = (String)attributes.get("value2");

		if (value2 != null) {
			setValue2(value2);
		}

		String value3 = (String)attributes.get("value3");

		if (value3 != null) {
			setValue3(value3);
		}

		String value4 = (String)attributes.get("value4");

		if (value4 != null) {
			setValue4(value4);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getConfigName() {
		if (_configName == null) {
			return StringPool.BLANK;
		}
		else {
			return _configName;
		}
	}

	@Override
	public void setConfigName(String configName) {
		_configName = configName;
	}

	@JSON
	@Override
	public String getValue1() {
		if (_value1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _value1;
		}
	}

	@Override
	public void setValue1(String value1) {
		_value1 = value1;
	}

	@JSON
	@Override
	public String getValue2() {
		if (_value2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _value2;
		}
	}

	@Override
	public void setValue2(String value2) {
		_value2 = value2;
	}

	@JSON
	@Override
	public String getValue3() {
		if (_value3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _value3;
		}
	}

	@Override
	public void setValue3(String value3) {
		_value3 = value3;
	}

	@JSON
	@Override
	public String getValue4() {
		if (_value4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _value4;
		}
	}

	@Override
	public void setValue4(String value4) {
		_value4 = value4;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public PhotoAppConfiguration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PhotoAppConfiguration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PhotoAppConfigurationImpl photoAppConfigurationImpl = new PhotoAppConfigurationImpl();

		photoAppConfigurationImpl.setUuid(getUuid());
		photoAppConfigurationImpl.setConfigName(getConfigName());
		photoAppConfigurationImpl.setValue1(getValue1());
		photoAppConfigurationImpl.setValue2(getValue2());
		photoAppConfigurationImpl.setValue3(getValue3());
		photoAppConfigurationImpl.setValue4(getValue4());

		photoAppConfigurationImpl.resetOriginalValues();

		return photoAppConfigurationImpl;
	}

	@Override
	public int compareTo(PhotoAppConfiguration photoAppConfiguration) {
		String primaryKey = photoAppConfiguration.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PhotoAppConfiguration)) {
			return false;
		}

		PhotoAppConfiguration photoAppConfiguration = (PhotoAppConfiguration)obj;

		String primaryKey = photoAppConfiguration.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PhotoAppConfigurationModelImpl photoAppConfigurationModelImpl = this;

		photoAppConfigurationModelImpl._originalUuid = photoAppConfigurationModelImpl._uuid;

		photoAppConfigurationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PhotoAppConfiguration> toCacheModel() {
		PhotoAppConfigurationCacheModel photoAppConfigurationCacheModel = new PhotoAppConfigurationCacheModel();

		photoAppConfigurationCacheModel.uuid = getUuid();

		String uuid = photoAppConfigurationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			photoAppConfigurationCacheModel.uuid = null;
		}

		photoAppConfigurationCacheModel.configName = getConfigName();

		String configName = photoAppConfigurationCacheModel.configName;

		if ((configName != null) && (configName.length() == 0)) {
			photoAppConfigurationCacheModel.configName = null;
		}

		photoAppConfigurationCacheModel.value1 = getValue1();

		String value1 = photoAppConfigurationCacheModel.value1;

		if ((value1 != null) && (value1.length() == 0)) {
			photoAppConfigurationCacheModel.value1 = null;
		}

		photoAppConfigurationCacheModel.value2 = getValue2();

		String value2 = photoAppConfigurationCacheModel.value2;

		if ((value2 != null) && (value2.length() == 0)) {
			photoAppConfigurationCacheModel.value2 = null;
		}

		photoAppConfigurationCacheModel.value3 = getValue3();

		String value3 = photoAppConfigurationCacheModel.value3;

		if ((value3 != null) && (value3.length() == 0)) {
			photoAppConfigurationCacheModel.value3 = null;
		}

		photoAppConfigurationCacheModel.value4 = getValue4();

		String value4 = photoAppConfigurationCacheModel.value4;

		if ((value4 != null) && (value4.length() == 0)) {
			photoAppConfigurationCacheModel.value4 = null;
		}

		return photoAppConfigurationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", configName=");
		sb.append(getConfigName());
		sb.append(", value1=");
		sb.append(getValue1());
		sb.append(", value2=");
		sb.append(getValue2());
		sb.append(", value3=");
		sb.append(getValue3());
		sb.append(", value4=");
		sb.append(getValue4());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.rsystems.model.PhotoAppConfiguration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>configName</column-name><column-value><![CDATA[");
		sb.append(getConfigName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value1</column-name><column-value><![CDATA[");
		sb.append(getValue1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value2</column-name><column-value><![CDATA[");
		sb.append(getValue2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value3</column-name><column-value><![CDATA[");
		sb.append(getValue3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value4</column-name><column-value><![CDATA[");
		sb.append(getValue4());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PhotoAppConfiguration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PhotoAppConfiguration.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _configName;
	private String _value1;
	private String _value2;
	private String _value3;
	private String _value4;
	private long _columnBitmask;
	private PhotoAppConfiguration _escapedModel;
}